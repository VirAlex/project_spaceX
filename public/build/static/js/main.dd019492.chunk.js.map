{"version":3,"sources":["logo.png","queries/launcheQuery.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","gql","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","Launches","console","log","this","props","launcheQuery","loading","renderLaunches","launches","map","key","Component","compose","graphql","name","Launch_QUERY","TakeLaunch","flight_numbert","useQuery","variables","error","data","launch_year","rocket","rocket_id","rocket_name","rocket_type","Launch","match","params","parseInt","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd019492.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7dab9996.png\";","import gql from \"graphql-tag\";\n\n\nexport default gql`\n{\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom';\n\n\nexport default function LaunchItem({launch: {flight_number, mission_name, launch_date_local, launch_success}}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launch_success,\n                \"text-danger\": !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date : <Moment format=\"DD-MM-YYYY HH:mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-9\">\n          <Link to={`/launch/${flight_number}`}className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport launcheQuery from '../queries/launcheQuery'\nimport { graphql } from \"react-apollo\";\nimport * as compose from \"lodash.flowright\";\nimport LaunchItems from './LaunchItem'\nimport MissionKey from \"./MissionKey\";\n\n\nclass Launches extends Component {\n  render() {\n    console.log(this.props.launcheQuery.loading);\n\n    return (\n      <div>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        {this.renderLaunches()}\n\n      </div>\n    )\n  }\n\n  renderLaunches(){\n    if(!this.props.launcheQuery.loading){\n      return <Fragment>\n            {this.props.launcheQuery.launches.map(launch=>{\n              return(\n                <LaunchItems key={launch.flight_number} launch={launch} />\n              )\n            })}\n      </Fragment>;\n      }else{\n        }\n      }\n    }\n\nexport default compose(graphql(launcheQuery, {name: \"launcheQuery\"}))(Launches)\n","import React, { Component, Fragment } from 'react'\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport className from 'classnames'\nimport { Link } from 'react-router-dom';\n\nconst Launch_QUERY = gql`\nquery LaunchQuery($flight_number: Int!){\n  launch(flight_number: $flight_number){\n      flight_number,\n      mission_name,\n      launch_year,\n      launch_success,\n      launch_date_local\n      rocket{\n        rocket_id,\n        rocket_name,\n        rocket_type\n      }\n  }\n}\n`;\n\n\n\n\n\nfunction TakeLaunch({flight_number: flight_numbert}) {\n  const { loading, error, data } = useQuery(Launch_QUERY, {\n    variables: { flight_number: flight_numbert }\n  });\n  if (loading) return null;\n  if (error) return `Error! ${error}`;\n  const{mission_name,\n        flight_number,\n        launch_year,\n        launch_success,\n        rocket:{ rocket_id,\n                  rocket_name,\n                  rocket_type}}=data.launch\n  console.log(data);\n\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">\n        <span className=\"text-dark\">Mission:</span>\n        {mission_name}\n      </h1>\n      <h4 className=\"mb-3\">Launch Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight Number : {flight_number}</li>\n        <li className=\"list-group-item\">Launch Year : {launch_year}</li>\n        <li className=\"list-group-item\">\n          Launch Successful :{\" \"}\n          <span\n            className={className({\n              \"text-success\": launch_success,\n              \"text-danger\": !launch_success\n            })}\n          >\n            {launch_success ? \"yes\" : \"No\"}\n          </span>\n        </li>\n      </ul>\n      <h4 className=\"my-3\">Rocket Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n      </ul>\n      <hr/>\n      <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n    </div>\n  );\n}\n\nexport class Launch extends Component {\n  render() {\n    let flight_numbert = this.props.match.params.flight_number\n    flight_numbert = parseInt(flight_numbert)\n\n    return (\n      <TakeLaunch flight_number={flight_numbert} />\n    );\n  }\n}\n\nexport default Launch\n","import React from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches'\nimport Launch from \"./components/Launch\";\n\nimport './App.css';\nimport logo from \"./logo.png\"\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: \"block\", margin: \"auto\" }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}